// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Olifant.JiraMetrics.Test.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create Value added time report")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class CreateValueAddedTimeReportFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CreateValueAddedTimeReport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create Value added time report", "To find waste in the process\r\nAs a person involved in Jira project\r\nI need the va" +
                    "lue-added-times presented in a report", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show Value Added Time header in report")]
        [NUnit.Framework.TestCaseAttribute("Happy scenario", "Key=DUMMYKEY", "Planning", "2000-01-01", "2020-12-01", null)]
        public virtual void ShowValueAddedTimeHeaderInReport(string scenarioDescription, string query, string cyclePeriod, string minDate, string maxDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show Value Added Time header in report", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And(string.Format("I have entered the following query: \"{0}\"", query), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And(string.Format("I have chosen the start and end of cycle as \"{0}\"", cyclePeriod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Min date",
                        "Max date"});
            table1.AddRow(new string[] {
                        string.Format("{0}", minDate),
                        string.Format("{0}", maxDate)});
#line 12
 testRunner.And("I enter the Start date interval as:", ((string)(null)), table1, "And ");
#line 15
 testRunner.When("I click the \"Value added time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then(string.Format("I should be able to see the following title header in the report: \"Value Added Ti" +
                        "me Report, cycle : {0}, jql : {1}, filters : [StartDateFilter({2},{3})]\"", cyclePeriod, query, minDate, maxDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get value Added Time info with cycles in full process")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void GetValueAddedTimeInfoWithCyclesInFullProcess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get value Added Time info with cycles in full process", new string[] {
                        "ignore"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.And("I have entered the following query: \"key in (SCSC-1000,DISCO-789,DISCO-846,DISCO-" +
                    "937)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("I have chosen start label \"started\" and start and end of cycle as \"Full process\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("I click the \"Value added time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Summary",
                        "Cycle",
                        "Value",
                        "Cycle description",
                        "Start date"});
            table2.AddRow(new string[] {
                        "SCSC-1000",
                        "Show project progress on web",
                        "1",
                        "0",
                        "Status = Open",
                        "2014-11-14 15:21"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "2",
                        "0",
                        "Label = started",
                        "2014-11-14 15:25"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "3",
                        "0",
                        "Status = Implement",
                        "2014-11-19 07:36"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "4",
                        "1",
                        "Status = Implementing",
                        "2014-11-19 07:37"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "5",
                        "0",
                        "Status = Open",
                        "2014-11-19 07:37"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "6",
                        "0",
                        "Status = Implement",
                        "2014-11-20 13:11"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "7",
                        "1",
                        "Status = Implementing",
                        "2014-11-20 13:12"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "8",
                        "1",
                        "Status = Review",
                        "2014-12-03 17:36"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "9",
                        "0",
                        "Status = Test",
                        "2014-12-03 10:52"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "10",
                        "0",
                        "Label = Blocked started",
                        "2014-12-03 11:00"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "11",
                        "0",
                        "Label = started",
                        "2014-12-03 08:20"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "12",
                        "1",
                        "Status = Testing",
                        "2014-12-03 12:37"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "13",
                        "0",
                        "Status = System Test Done",
                        "2014-12-03 06:30"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "14",
                        "0",
                        "Status = System Integration Test",
                        "2015-01-08 14:34"});
#line 29
 testRunner.Then("I should be presented the following value added times in the report:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get value-added time info with cycles in test phase")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void GetValue_AddedTimeInfoWithCyclesInTestPhase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get value-added time info with cycles in test phase", new string[] {
                        "ignore"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.And("I have entered the following query: \"key in (SCSC-1000,DISCO-789,DISCO-846,DISCO-" +
                    "937)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("I have chosen the start and end of cycle as \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("I click the \"Value added time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Summary",
                        "Cycle",
                        "Value",
                        "Cycle description",
                        "Start date"});
            table3.AddRow(new string[] {
                        "SCSC-1000",
                        "Show project progress on web",
                        "1",
                        "0",
                        "Status = Test",
                        "2014-12-05 10:52"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "2",
                        "0",
                        "Label = Blocked started",
                        "2014-12-08 11:00"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "3",
                        "0",
                        "Label = started",
                        "2014-12-09 08:20"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "4",
                        "1",
                        "Status = Testing",
                        "2014-12-09 12:37"});
            table3.AddRow(new string[] {
                        "",
                        "",
                        "5",
                        "0",
                        "Status = System Test Done",
                        "2014-12-11 06:30"});
#line 52
 testRunner.Then("I should be presented the following value added times in the report:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
