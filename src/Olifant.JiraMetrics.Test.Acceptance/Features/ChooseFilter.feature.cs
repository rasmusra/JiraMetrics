// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Olifant.JiraMetrics.Test.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Choose Filter")]
    public partial class ChooseFilterFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ChooseFilter.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Choose Filter", "In order to configure what cycles to get data for\r\nAs a Kanban number cruncher\r\nI" +
                    " want to be able to choose start and end of cycle period", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be given default values for start date interval")]
        public virtual void ShouldBeGivenDefaultValuesForStartDateInterval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be given default values for start date interval", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("I start the program", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Min date",
                        "Max date"});
            table1.AddRow(new string[] {
                        "2000-01-01",
                        "2050-01-01"});
#line 9
 testRunner.Then("I should see default dates for Start date interval as:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Different start and end date combinations")]
        public virtual void DifferentStartAndEndDateCombinations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Different start and end date combinations", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("I have entered the following query: \"Issues started before and after 2014-07-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("I have chosen the start and end of cycle as \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Min date",
                        "Max date"});
            table2.AddRow(new string[] {
                        "2014-07-01",
                        "2014-10-31"});
#line 18
 testRunner.And("I enter the Start date interval as:", ((string)(null)), table2, "And ");
#line 21
 testRunner.When("I click the \"Cycle time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Summary",
                        "Started date",
                        "Closed date",
                        "Cycle Time",
                        "Story Points",
                        "Original estimate"});
            table3.AddRow(new string[] {
                        "OFU-2377",
                        "UI fixes",
                        "2014-10-03 10:22:31",
                        "2014-10-08 09:24:16",
                        "4,96",
                        "1,5",
                        ""});
#line 22
 testRunner.Then("I should be able to see the following cycle times in the report:", ((string)(null)), table3, "Then ");
#line 25
 testRunner.But("I should not see \"OFU-1462\" in the report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Include issues not done")]
        [NUnit.Framework.TestCaseAttribute("Development not done yet", "DISCO-729", null)]
        public virtual void IncludeIssuesNotDone(string scenarioDescription, string key, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Include issues not done", exampleTags);
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.And(string.Format("I have entered the following query: \"Key={0}\"", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("I have chosen the start and end of cycle as \"Development\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("I \"uncheck\" the checkbox \"Exclude issues that are not done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("I click the \"Cycle time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then(string.Format("I should see \"{0}\" in the report", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exclude issues not done")]
        [NUnit.Framework.TestCaseAttribute("Development not done yet", "DISCO-729", null)]
        public virtual void ExcludeIssuesNotDone(string scenarioDescription, string key, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exclude issues not done", exampleTags);
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.And(string.Format("I have entered the following query: \"Key={0}\"", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("I have chosen the start and end of cycle as \"Development\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("I \"check\" the checkbox \"Exclude issues that are not done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("I click the \"Cycle time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then(string.Format("I should not see \"{0}\" in the report", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exclude issues not started")]
        [NUnit.Framework.TestCaseAttribute("Opened but closed before work started", "SCSC-974", null)]
        public virtual void ExcludeIssuesNotStarted(string scenarioDescription, string key, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exclude issues not started", exampleTags);
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.And(string.Format("I have entered the following query: \"Key={0}\"", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("I have chosen the start and end of cycle as \"Development\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.When("I click the \"Cycle time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then(string.Format("I should not see \"{0}\" in the report", key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Include issue that matches filter on done date")]
        [NUnit.Framework.TestCaseAttribute("min date same day as done date", "2014-10-20", "2014-11-07", null)]
        [NUnit.Framework.TestCaseAttribute("max date one day after done date", "2014-10-10", "2014-10-21", null)]
        public virtual void IncludeIssueThatMatchesFilterOnDoneDate(string scenarioDescription, string minEndDate, string maxEndDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Include issue that matches filter on done date", exampleTags);
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.And("I have entered the following query: \"Key=DISCO-620\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("I have chosen the start and end of cycle as \"Development\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("I \"check\" the checkbox \"Exclude issues that are not done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Min date",
                        "Max date"});
            table4.AddRow(new string[] {
                        string.Format("{0}", minEndDate),
                        string.Format("{0}", maxEndDate)});
#line 71
 testRunner.And("I enter the Done date interval as:", ((string)(null)), table4, "And ");
#line 74
 testRunner.When("I click the \"Cycle time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("I should see \"DISCO-620\" in the report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter out issue that does not match filter on done date")]
        [NUnit.Framework.TestCaseAttribute("min date one day after done date", "2014-10-21", "2014-11-07", null)]
        [NUnit.Framework.TestCaseAttribute("max date one same day as done date", "2014-10-10", "2014-10-20", null)]
        public virtual void FilterOutIssueThatDoesNotMatchFilterOnDoneDate(string scenarioDescription, string minEndDate, string maxEndDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter out issue that does not match filter on done date", exampleTags);
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("program is started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
 testRunner.And("I have entered the following query: \"Key=DISCO-620\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("I have chosen the start and end of cycle as \"Development\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("I \"check\" the checkbox \"Exclude issues that are not done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Min date",
                        "Max date"});
            table5.AddRow(new string[] {
                        string.Format("{0}", minEndDate),
                        string.Format("{0}", maxEndDate)});
#line 88
 testRunner.And("I enter the Done date interval as:", ((string)(null)), table5, "And ");
#line 91
 testRunner.When("I click the \"Cycle time report\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("I should not see \"DISCO-620\" in the report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
