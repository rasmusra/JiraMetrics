// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Olifant.JiraMetrics.Test.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Presenting project progress")]
    [NUnit.Framework.CategoryAttribute("chrome")]
    public partial class PresentingProjectProgressFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PresentingProjectProgress.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Presenting project progress", "In order to get a grip on project risks \r\nAs a stakeholder\r\nI want to see the pro" +
                    "ject progress in a burn-up \r\nand the graph should be updated daily", ProgrammingLanguage.CSharp, new string[] {
                        "chrome"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
 testRunner.Given("a team member named \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("a project lead named \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("a stakeholder named \"Berit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("a system named \"OrderTracking\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("a project named \"OFU3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("a project site named \"OrderTracking on Epic\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View burn-up")]
        public virtual void ViewBurn_Up()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View burn-up", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 19
 testRunner.Given("I am logged in as \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("I navigate to burn-up page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("I should see a burn-up graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "textbox",
                        "jql",
                        ""});
            table1.AddRow(new string[] {
                        "button",
                        "generate_graph",
                        ""});
#line 22
 testRunner.And("I should see the following controls:", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter burn-up on dates")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void FilterBurn_UpOnDates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter burn-up on dates", new string[] {
                        "ignore"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 30
 testRunner.Given("I am logged in as \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("I navigate to burn-up page on the project site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start date",
                        "End date"});
            table2.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01"});
#line 32
 testRunner.And("I enter the following start- and end-dates:", ((string)(null)), table2, "And ");
#line 35
 testRunner.And("click button \"show graph\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start X",
                        "End X",
                        "Start Y",
                        "End Y"});
            table3.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01",
                        "0",
                        "163 (not determined yet)"});
#line 36
 testRunner.Then("I should see a burn-up graph with values:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email link to graph")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void EmailLinkToGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email link to graph", new string[] {
                        "ignore"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 43
 testRunner.Given("I am logged in as \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start value at x-axis",
                        "End-value at x-axis",
                        "Start-value at y-axis",
                        "End-value at y-axis"});
            table4.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01",
                        "0",
                        "163 (not determined yet)"});
#line 44
 testRunner.And("I see a burn-up graph with values:", ((string)(null)), table4, "And ");
#line 47
 testRunner.And("I email the url of the graph to \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.When("\"sixten\" clicks on the link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start value at x-axis",
                        "End-value at x-axis",
                        "Start-value at y-axis",
                        "End-value at y-axis"});
            table5.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01",
                        "0",
                        "163 (not determined yet)"});
#line 49
 testRunner.Then("\"Sixten\" should see a burn-up graph on a web-page with values:", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start date",
                        "End date"});
            table6.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01"});
#line 52
 testRunner.And("\"Sixten\" should see the following start- and end-dates:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sixten filters for OFU3 on burn-up")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void SixtenFiltersForOFU3OnBurn_Up()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sixten filters for OFU3 on burn-up", new string[] {
                        "ignore"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 60
 testRunner.Given("I am logged in as \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When("I navigate to burn-up page on the project site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.And("I enter \"OFU3\" in the \"Filter on labels\" textfield", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.Then("I should see a burn-up graph with all iterations since OFU3-project started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.And("it should only present burn-up for OFU3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
