// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Olifant.JiraMetrics.Test.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("JM1 - Present project progress")]
    [NUnit.Framework.CategoryAttribute("web")]
    public partial class JM1_PresentProjectProgressFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "JM1 - Present project progress.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "JM1 - Present project progress", "In order to get a grip on project risks \r\nAs a stakeholder\r\nI want to see the pro" +
                    "ject progress in a burn-up \r\nand the graph should be updated daily", ProgrammingLanguage.CSharp, new string[] {
                        "web"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
 testRunner.Given("a team member named \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("a project lead named \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("a stakeholder named \"Berit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("a system named \"JiraMetrics\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("a project named \"JiraMetrics\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 - View burn-up")]
        [NUnit.Framework.CategoryAttribute("no_data_changes")]
        public virtual void _1_ViewBurn_Up()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 - View burn-up", new string[] {
                        "no_data_changes"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 19
 testRunner.Given("I am logged in as \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("I navigate to \"burn-up\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.And("I wait, but not longer than 1 second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.Then("I should see a burn-up graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Project name"});
            table1.AddRow(new string[] {
                        "OFU"});
            table1.AddRow(new string[] {
                        "Disco"});
            table1.AddRow(new string[] {
                        "SCSC"});
#line 23
 testRunner.And("I should see a dropdown with selectable projects:", ((string)(null)), table1, "And ");
#line 28
 testRunner.But("the statuses should be hidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2 - Plot issues from query in burn-up")]
        [NUnit.Framework.CategoryAttribute("no_data_changes")]
        public virtual void _2_PlotIssuesFromQueryInBurn_Up()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2 - Plot issues from query in burn-up", new string[] {
                        "no_data_changes"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 33
 testRunner.Given("I am logged in as \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.And("I navigate to \"burn-up\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("I query \"Disco\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("I should see a burn-up graph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start X",
                        "End X",
                        "Start Y",
                        "End Y"});
            table2.AddRow(new string[] {
                        "start",
                        "y14w51",
                        "0",
                        "12.5"});
#line 37
 testRunner.And("I should see the following values in the graph:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3 - Load JiraMetrics with new issues from Jira")]
        [NUnit.Framework.CategoryAttribute("wip")]
        public virtual void _3_LoadJiraMetricsWithNewIssuesFromJira()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3 - Load JiraMetrics with new issues from Jira", new string[] {
                        "wip"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 43
 testRunner.Given("I am logged in as \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Story points"});
            table3.AddRow(new string[] {
                        "JM1-620",
                        "3"});
            table3.AddRow(new string[] {
                        "OFU-1462",
                        "4"});
#line 44
 testRunner.And("the system contains the following issues:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Project",
                        "Key",
                        "Story Points"});
            table4.AddRow(new string[] {
                        "JM1",
                        "JM1-665",
                        "5"});
            table4.AddRow(new string[] {
                        "OFU",
                        "OFU-2290",
                        "6"});
#line 48
 testRunner.And("Jira contains additional issues:", ((string)(null)), table4, "And ");
#line 52
 testRunner.When("I navigate to \"admin\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.And("I choose to load JiraMetrics with project \"Disco\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("I wait, but not longer than 1 second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "issue",
                        "action"});
            table5.AddRow(new string[] {
                        "JM1-665",
                        "Added!"});
#line 55
 testRunner.Then("I should be presented a list of issues been added:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("4 - Updating graph with new issues")]
        public virtual void _4_UpdatingGraphWithNewIssues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4 - Updating graph with new issues", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 61
 testRunner.Given("I am logged in as \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue"});
            table6.AddRow(new string[] {
                        "Disco",
                        "DISCO-1462"});
            table6.AddRow(new string[] {
                        "OFU",
                        "OFU-676"});
#line 62
 testRunner.And("the system contains the following issues:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start X",
                        "End X",
                        "Start Y",
                        "End Y"});
            table7.AddRow(new string[] {
                        "start",
                        "y14w51",
                        "0",
                        "12.5"});
#line 66
 testRunner.And("I have the following values in the burn-up graph:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue"});
            table8.AddRow(new string[] {
                        "Disco",
                        "DISCO-2299"});
#line 69
 testRunner.When("the following issue is added to the system from Jira:", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start X",
                        "End X",
                        "Start Y",
                        "End Y"});
            table9.AddRow(new string[] {
                        "start",
                        "y14w51",
                        "0",
                        "12.5"});
#line 72
 testRunner.And("I should see the following values in the graph:", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("5 - Load JiraMetrics with changed issues from Jira")]
        public virtual void _5_LoadJiraMetricsWithChangedIssuesFromJira()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5 - Load JiraMetrics with changed issues from Jira", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 78
 testRunner.Given("I am logged in as \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue"});
            table10.AddRow(new string[] {
                        "Disco",
                        "DISCO-1462"});
            table10.AddRow(new string[] {
                        "OFU",
                        "OFU-676"});
#line 79
 testRunner.And("the system contains the following issues:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue"});
            table11.AddRow(new string[] {
                        "Disco",
                        "DISCO-2299"});
            table11.AddRow(new string[] {
                        "OFU",
                        "OFU-2067"});
#line 83
 testRunner.And("Jira contains additional issues:", ((string)(null)), table11, "And ");
#line 87
 testRunner.When("I navigate to \"admin\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.And("I choose to load JiraMetrics with project \"Disco\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "issue",
                        "comment"});
            table12.AddRow(new string[] {
                        "DISCO-2299",
                        "Updated!"});
#line 89
 testRunner.Then("I should be presented a list of updated issues:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("6 - Updating graph with changed issues")]
        public virtual void _6_UpdatingGraphWithChangedIssues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6 - Updating graph with changed issues", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 95
 testRunner.Given("I am logged in as \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue",
                        "status",
                        "Story Points"});
            table13.AddRow(new string[] {
                        "Disco",
                        "DISCO-1462",
                        "Closed",
                        "3"});
            table13.AddRow(new string[] {
                        "Disco",
                        "DISCO-2299",
                        "Implementing",
                        "4"});
            table13.AddRow(new string[] {
                        "OFU",
                        "OFU-676",
                        "Closed",
                        "5"});
#line 96
 testRunner.And("the system contains the following issues:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start X",
                        "End X",
                        "Start Y",
                        "End Y"});
            table14.AddRow(new string[] {
                        "start",
                        "y14w51",
                        "0",
                        "3"});
#line 101
 testRunner.And("I choose project \"Disco\" to get the following values in the burn-up graph:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue",
                        "status"});
            table15.AddRow(new string[] {
                        "Disco",
                        "DISCO-2299",
                        "Closed"});
#line 104
 testRunner.When("the following issue is updated to the system from Jira:", ((string)(null)), table15, "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start X",
                        "End X",
                        "Start Y",
                        "End Y"});
            table16.AddRow(new string[] {
                        "start",
                        "y14w51",
                        "0",
                        "7.0"});
#line 107
 testRunner.Then("I should be able to see the following values in the burn-up graph:", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("7 - Loading JiraMetrics when no new issues needs to be loaded")]
        public virtual void _7_LoadingJiraMetricsWhenNoNewIssuesNeedsToBeLoaded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("7 - Loading JiraMetrics when no new issues needs to be loaded", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 113
 testRunner.Given("I am logged in as \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue"});
            table17.AddRow(new string[] {
                        "Disco",
                        "DISCO-1462"});
            table17.AddRow(new string[] {
                        "OFU",
                        "OFU-676"});
#line 114
 testRunner.And("the system contains the following issues:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "project",
                        "issue"});
            table18.AddRow(new string[] {
                        "Disco",
                        "DISCO-1462"});
            table18.AddRow(new string[] {
                        "OFU",
                        "OFU-2067"});
#line 118
 testRunner.And("Jira contains issues:", ((string)(null)), table18, "And ");
#line 122
 testRunner.When("I navigate to \"admin\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.And("I choose to load JiraMetrics with project \"Disco\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.Then("I should be presented a message \"All issues are up-to-date for project \"Disco\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter burn-up on dates")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void FilterBurn_UpOnDates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter burn-up on dates", new string[] {
                        "ignore"});
#line 128
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 129
 testRunner.Given("I am logged in as \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.When("I navigate to burn-up page on the project site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start date",
                        "End date"});
            table19.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01"});
#line 131
 testRunner.And("I enter the following start- and end-dates:", ((string)(null)), table19, "And ");
#line 134
 testRunner.And("click button \"show graph\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start X",
                        "End X",
                        "Start Y",
                        "End Y"});
            table20.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01",
                        "0",
                        "163 (not determined yet)"});
#line 135
 testRunner.Then("I should see a burn-up graph with values:", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email link to graph")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void EmailLinkToGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email link to graph", new string[] {
                        "ignore"});
#line 141
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 142
 testRunner.Given("I am logged in as \"Andreas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start value at x-axis",
                        "End-value at x-axis",
                        "Start-value at y-axis",
                        "End-value at y-axis"});
            table21.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01",
                        "0",
                        "163 (not determined yet)"});
#line 143
 testRunner.And("I see a burn-up graph with values:", ((string)(null)), table21, "And ");
#line 146
 testRunner.And("I email the url of the graph to \"Sixten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.When("\"sixten\" clicks on the link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start value at x-axis",
                        "End-value at x-axis",
                        "Start-value at y-axis",
                        "End-value at y-axis"});
            table22.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01",
                        "0",
                        "163 (not determined yet)"});
#line 148
 testRunner.Then("\"Sixten\" should see a burn-up graph on a web-page with values:", ((string)(null)), table22, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start date",
                        "End date"});
            table23.AddRow(new string[] {
                        "2014-07-01",
                        "2014-12-01"});
#line 151
 testRunner.And("\"Sixten\" should see the following start- and end-dates:", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
